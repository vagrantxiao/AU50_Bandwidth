// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ydma_Block_entry11_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_size,
        input_size,
        config_size,
        output_size_c_din,
        output_size_c_num_data_valid,
        output_size_c_fifo_cap,
        output_size_c_full_n,
        output_size_c_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] output_size;
input  [31:0] input_size;
input  [31:0] config_size;
output  [31:0] output_size_c_din;
input  [2:0] output_size_c_num_data_valid;
input  [2:0] output_size_c_fifo_cap;
input   output_size_c_full_n;
output   output_size_c_write;
output  [30:0] ap_return_0;
output  [30:0] ap_return_1;
output  [31:0] ap_return_2;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_size_c_write;
reg[30:0] ap_return_0;
reg[30:0] ap_return_1;
reg[31:0] ap_return_2;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_size_c_blk_n;
reg    ap_block_state1;
wire   [0:0] icmp_ln31_fu_66_p2;
wire   [30:0] trunc_ln29_2_fu_72_p1;
wire   [30:0] select_ln31_fu_76_p3;
wire   [30:0] trunc_ln29_fu_58_p1;
wire   [30:0] trunc_ln29_1_fu_62_p1;
wire   [31:0] zext_ln31_fu_84_p1;
reg   [30:0] ap_return_0_preg;
reg   [30:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_int_blocking_cur_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 31'd0;
#0 ap_return_1_preg = 31'd0;
#0 ap_return_2_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 31'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= trunc_ln29_fu_58_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 31'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= trunc_ln29_1_fu_62_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
        ap_return_2_preg[1] <= 1'b0;
        ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
        ap_return_2_preg[11] <= 1'b0;
        ap_return_2_preg[12] <= 1'b0;
        ap_return_2_preg[13] <= 1'b0;
        ap_return_2_preg[14] <= 1'b0;
        ap_return_2_preg[15] <= 1'b0;
        ap_return_2_preg[16] <= 1'b0;
        ap_return_2_preg[17] <= 1'b0;
        ap_return_2_preg[18] <= 1'b0;
        ap_return_2_preg[19] <= 1'b0;
        ap_return_2_preg[20] <= 1'b0;
        ap_return_2_preg[21] <= 1'b0;
        ap_return_2_preg[22] <= 1'b0;
        ap_return_2_preg[23] <= 1'b0;
        ap_return_2_preg[24] <= 1'b0;
        ap_return_2_preg[25] <= 1'b0;
        ap_return_2_preg[26] <= 1'b0;
        ap_return_2_preg[27] <= 1'b0;
        ap_return_2_preg[28] <= 1'b0;
        ap_return_2_preg[29] <= 1'b0;
        ap_return_2_preg[30] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[30 : 0] <= zext_ln31_fu_84_p1[30 : 0];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = trunc_ln29_fu_58_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = trunc_ln29_1_fu_62_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = zext_ln31_fu_84_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_c_blk_n = output_size_c_full_n;
    end else begin
        output_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_c_write = 1'b1;
    end else begin
        output_size_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = output_size_c_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln31_fu_66_p2 = (($signed(config_size) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign output_size_c_din = output_size;

assign select_ln31_fu_76_p3 = ((icmp_ln31_fu_66_p2[0:0] == 1'b1) ? trunc_ln29_2_fu_72_p1 : 31'd0);

assign trunc_ln29_1_fu_62_p1 = input_size[30:0];

assign trunc_ln29_2_fu_72_p1 = config_size[30:0];

assign trunc_ln29_fu_58_p1 = output_size[30:0];

assign zext_ln31_fu_84_p1 = select_ln31_fu_76_p3;

always @ (posedge ap_clk) begin
    ap_return_2_preg[31] <= 1'b0;
end

endmodule //ydma_Block_entry11_proc
